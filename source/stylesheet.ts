/*
 * Copyright (C) 2018-2019 Silas B. Domingos
 * This source code is licensed under the MIT License as described in the file LICENSE.
 */
import * as Class from '@singleware/class';

import { Selector } from './selector';
import { Style } from './style';

/**
 * Stylesheet class.
 */
@Class.Describe()
export class Stylesheet extends Class.Null {
  /**
   * Map of styles.
   */
  @Class.Private()
  private styles = <Selector>{};

  /**
   * Gets the representative string of the specified style object.
   * @param style Style object.
   * @returns Returns the representative string generated by the given style object.
   */
  @Class.Private()
  private static getStyleCode(style: Style): string {
    const properties = [];
    for (const property in style) {
      const value = (<any>style)[property];
      if (value !== void 0) {
        const propertyName = property.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();
        const propertyValue = value instanceof Array ? value.join(',') : value;
        properties.push(`${propertyName}:${propertyValue}`);
      }
    }
    return properties.join(';');
  }

  /**
   * Returns a new style for the specified selector path.
   * @param selectors Selectors path.
   * @returns Returns the style object.
   */
  @Class.Public()
  public select(...selectors: string[]): Style {
    const selector = selectors.join(',');
    if (this.styles[selector] === void 0) {
      this.styles[selector] = new Style();
    }
    return this.styles[selector];
  }

  /**
   * Remove all styles from this stylesheet.
   */
  @Class.Public()
  public clear(): void {
    this.styles = {};
  }

  /**
   * Convert all styles from this stylesheet to its representative code.
   * @returns Returns the representation code of this stylesheet.
   */
  @Class.Public()
  public toString(): string {
    const stylesheet = [];
    for (const selector in this.styles) {
      stylesheet.push(`${selector}{${Stylesheet.getStyleCode(this.styles[selector])}}`);
    }
    return stylesheet.join('');
  }
}
